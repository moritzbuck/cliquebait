from cliqueblock import get_verbose


def cluster_simple(to_cluster, step_cutoff = 2.5, hard_pos_cutoff = 97.5, size_cutoff = 5, global_cutoff = 89):
    ori_set = to_clusterdef cluster_simple(to_cluster, step_cutoff = 2.5, hard_pos_cutoff = 97.5, size_cutoff = 5, global_cutoff = 89):
    ori_set = to_cluster
    fin_clusters = []
    while to_cluster:
        square = [[min_ani if frozenset((g1,g2)) not in dreped_anis else (100 -dreped_anis[frozenset((g1,g2)) ])/100  for g2 in to_cluster ] for g1 in to_cluster]
        panis = pdist(array(square, dtype = float))
        links_ = linkage(panis, method='complete')
        tree = to_tree(links_)
 
        nstats = {c[0].id :  get_cluster_stats(c[0], to_cluster ,parent_id = c[1]) for c in  iterate_nodes(tree, cutoff = 0.05)}


        ids_ = [k for k,v in  nstats.items() if v['is_leaf']]
        clusters = []
        for i in ids_ :
            clusters += [frozenset(leaf2cluster(i, nstats,  hard_pos_cutoff = hard_pos_cutoff, step_cutoff = step_cutoff, global_cutoff = global_cutoff))]
        print(f"{len(set(clusters))} unique clusters obtained from {len(ids_)} genomes")
            
        print("derep and merge clusters")

        print(f"{len(set(clusters))} unique clusters left after removing clusters {size_cutoff} or smaller")
        
        clusters = list(set(clusters) - {frozenset(ori_set)})

        to_rm = set()
        for i,c1 in enumerate(clusters):
            for j,c2 in enumerate(clusters):
                if j > i and len(c2.intersection(c1)) > 0 :
                    if len(c1) > len(c2):
                        to_rm.add(c1)
                    else :
                        to_rm.add(c2)


        fin_clusters +=  [c for c in clusters if c not in to_rm and c not in fin_clusters]
        
        if to_rm:
            torm = list(frozenset(ori_set) - frozenset().union(*fin_clusters))
            print( f"{len(torm)} removed as they were engulfing smalled clusters" )
            to_cluster = torm
        else :
            to_cluster = []

    fin_clusters = list(set([c for c in set(fin_clusters) if len(c) > size_cutoff]))    
        
    print(f"Final cluster count {len(fin_clusters)} accounting for {len(frozenset.union(*fin_clusters))} genomes (e.g. {100*len(frozenset.union(*fin_clusters))/len(ori_set)}% of the genomes")
    return fin_clusters

    fin_clusters = []
    while to_cluster:
        square = [[min_ani if frozenset((g1,g2)) not in dreped_anis else (100 -dreped_anis[frozenset((g1,g2)) ])/100  for g2 in to_cluster ] for g1 in to_cluster]
        panis = pdist(array(square, dtype = float))
        links_ = linkage(panis, method='complete')
        tree = to_tree(links_)
 
        nstats = {c[0].id :  get_cluster_stats(c[0], to_cluster ,parent_id = c[1]) for c in  iterate_nodes(tree, cutoff = 0.05)}


        ids_ = [k for k,v in  nstats.items() if v['is_leaf']]
        clusters = []
        for i in ids_ :
            clusters += [frozenset(leaf2cluster(i, nstats,  hard_pos_cutoff = hard_pos_cutoff, step_cutoff = step_cutoff, global_cutoff = global_cutoff))]
        print(f"{len(set(clusters))} unique clusters obtained from {len(ids_)} genomes")
            
        print("derep and merge clusters")

        print(f"{len(set(clusters))} unique clusters left after removing clusters {size_cutoff} or smaller")
        
        clusters = list(set(clusters) - {frozenset(ori_set)})

        to_rm = set()
        for i,c1 in enumerate(clusters):
            for j,c2 in enumerate(clusters):
                if j > i and len(c2.intersection(c1)) > 0 :
                    if len(c1) > len(c2):
                        to_rm.add(c1)
                    else :
                        to_rm.add(c2)


        fin_clusters +=  [c for c in clusters if c not in to_rm and c not in fin_clusters]
        
        if to_rm:
            torm = list(frozenset(ori_set) - frozenset().union(*fin_clusters))
            print( f"{len(torm)} removed as they were engulfing smalled clusters" )
            to_cluster = torm
        else :
            to_cluster = []

    fin_clusters = list(set([c for c in set(fin_clusters) if len(c) > size_cutoff]))    
        
    print(f"Final cluster count {len(fin_clusters)} accounting for {len(frozenset.union(*fin_clusters))} genomes (e.g. {100*len(frozenset.union(*fin_clusters))/len(ori_set)}% of the genomes")
    return fin_clusters
